/**
 * Created by IntelliJ IDEA.
 * User: James Ward <james@jamesward.org>
 * Date: 3/23/11
 * Time: 1:34 PM
 */
package org.mixingloom.patcher
{
	import flash.events.Event;
	import flash.events.IOErrorEvent;
	import flash.system.ApplicationDomain;
	import flash.utils.Dictionary;
	
	import org.as3commons.bytecode.abc.AbcFile;
	import org.as3commons.bytecode.abc.ClassInfo;
	import org.as3commons.bytecode.abc.InstanceInfo;
	import org.as3commons.bytecode.abc.LNamespace;
	import org.as3commons.bytecode.abc.MethodBody;
	import org.as3commons.bytecode.abc.MethodInfo;
	import org.as3commons.bytecode.abc.MethodTrait;
	import org.as3commons.bytecode.abc.Multiname;
	import org.as3commons.bytecode.abc.MultinameL;
	import org.as3commons.bytecode.abc.NamespaceSet;
	import org.as3commons.bytecode.abc.Op;
	import org.as3commons.bytecode.abc.QualifiedName;
	import org.as3commons.bytecode.abc.SlotOrConstantTrait;
	import org.as3commons.bytecode.abc.TraitInfo;
	import org.as3commons.bytecode.abc.enum.MultinameKind;
	import org.as3commons.bytecode.abc.enum.NamespaceKind;
	import org.as3commons.bytecode.abc.enum.Opcode;
	import org.as3commons.bytecode.abc.enum.TraitKind;
	import org.as3commons.bytecode.emit.IAbcBuilder;
	import org.as3commons.bytecode.emit.impl.AbcBuilder;
	import org.as3commons.bytecode.emit.impl.MethodBuilder;
	import org.as3commons.bytecode.io.AbcDeserializer;
	import org.as3commons.bytecode.typeinfo.Argument;
	import org.as3commons.bytecode.util.MultinameUtil;
	import org.mixingloom.SwfTag;
	
	/**
	 * Gave up on the bytecode tilli learn how to add an anoyouse function ....
	 * 
	 * */
	public class MigrateUtilsPrototypes extends AbstractPatcher {
		
		static public var dictClass : Dictionary = new Dictionary(true); 
		/**
		 * will store last loaded class here the version 
		 * */
		static public var dictClassVersions : Dictionary = new Dictionary(true)
		/**
		 * need to know name of loaded swfs or something 
		 * */
		static public var Count : int = 0 ;
		/**
		 * version of class name with dots
		 * */
		private var classNameDot:String;
		
		public var className:String;
		/**
		 * when loading a 2nd dary version
		 * store original name here
		 * ...unnecsary are you are loading to a diff context ....
		 * */
		public var originalClassName: String = ''
		public var propertyOrMethodName:String;
		private var abcFile:AbcFile;
		private var funcs:Array;
		
		public function MigrateUtilsPrototypes()
		{
		}
		
		/**
		 * Takes swf tag and remove it for collisions 
		 * */
		public function makeClass(swfTag: SwfTag, fx : Function ):void
		{
			this.fxCallback = fx; 
			swfTag.tagBody.position = 4;
			
			var abcStartLocation:uint = 4;
			while (swfTag.tagBody.readByte() != 0)
			{
				abcStartLocation++;
			}
			abcStartLocation++; // skip the string byte terminator
			
			var startOfConstPoolPosition:uint = abcStartLocation + 4;
			
			swfTag.tagBody.position = 0;
			
			var abcDeserializer:AbcDeserializer = new AbcDeserializer(swfTag.tagBody);
			this.abcFile = abcDeserializer.deserialize(abcStartLocation)
			
			var info : ClassInfo = abcFile.classInfo[0] as ClassInfo;
			
			//get name and package 
			var name : String = info.classMultiname.name
			var package_ : String = info.classMultiname.fullName.replace( '.'+info.classMultiname.name, '' ) 
			this.className = package_+'.'+name; 
			//get version 
			var version : int = dictClassVersions[this.className];
			version++;
			dictClassVersions[this.className] = version
			this.version = version; 
			if ( version ==1 )
			{
				
			}
			else
			{
				this.originalClassName = this.className; 
				//rename
				name+='V'+version.toString()
				info.classMultiname.name =name
				this.className = package_+'.'+name; 
			}
			
			//get all functions 
			this.funcs = this.getAllFunctions(); 
			this.convertFuncsToVars( funcs ) 
			 
			//reload 
			var abcBuilder:IAbcBuilder = new AbcBuilder();
			
			abcBuilder.addEventListener(Event.COMPLETE, loadedHandler);
			abcBuilder.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
			abcBuilder.addEventListener(IOErrorEvent.VERIFY_ERROR, errorHandler);
			
			//var appDomain : ApplicationDomain;
			this.appDomain ;//= ApplicationDomain.currentDomain; 
			if ( version > 1) 
			{
				//this.appDomain = new ApplicationDomain();
			}
			abcBuilder['reload']( abcFile, appDomain ); 
			return;
			abcBuilder.buildAndLoad();
			//abcBuilder.buildAndExport()
			//var x2 : AbcFile = abcBuilder.build(null); 
			return; 
		}
		
		/**
		 * make var 
		 * make function 
		 * clear local scope 
		 * set var to function in constructor
		 * */
		private function convertFuncsToVars(funcs:Array):void
		{
			this.initBlocking()
			var inst : InstanceInfo = abcFile.instanceInfo[0] as InstanceInfo
			var traits : Array = inst.traits.concat()
			var traits2 : Array = [] 
			for each ( var trait : TraitInfo in  inst.traits  ) 
			{
				if (  trait.traitKind.description == TraitKind.METHOD.description  ) 
				{
					var mT : MethodTrait = trait as MethodTrait
					if ( mT.isStatic || mT.isGetter || mT.isSetter  ) 
					{
						//traits2.push( trait ) 
						continue; 
					}
					var index : int = traits.indexOf(   trait  )
					//traits.splice( index, 1 )  
					trait.traitMultiname.name  = this.convertFxNameToRenamed(   trait.traitMultiname.name );
				}
				else
				{
					trace(trait.traitMultiname.fullName , trait.traitKind.description ) ;  
					//traits2.push( trait ) 
				}
			}
			inst.traits = traits; 
			trace('covop5')
			for each ( var fxName : String in funcs ) 
			{
				
				var fxVarName : String = this.convertFxNameToProp( fxName ) ; 
				//create new variable (Function) to hold function for retrieval
				var slot : SlotOrConstantTrait = new SlotOrConstantTrait()
				slot.typeMultiname = new QualifiedName('Function', LNamespace.PUBLIC,MultinameKind.QNAME ) ; 
				slot.traitMultiname = new QualifiedName(fxVarName, LNamespace.PUBLIC,MultinameKind.QNAME ) ; 
				slot.traitKind = TraitKind.SLOT
				inst.addTrait( slot );  //make on prototype only...
				
				var dbg : Array = [inst.slotOrConstantTraits]
				inst.slotOrConstantTraits.length
				
				//clone target method 
				var cloneFx : MethodInfo = this.getMethodByName(fxName)
				
				var m : MethodInfo = new MethodInfo()
				m.methodName = ''
				m.methodBody = cloneFx.methodBody.clone() as MethodBody;
				m.methodBody = new MethodBody();
				//m.methodBody.opcodes = [] ; 
				
				for each ( var arg : Argument in cloneFx.formalParameters )
				{
					m.addArgument( arg ) ; 
				}
				for each ( arg in cloneFx.optionalParameters )
				{
					m.addArgument( arg ) ; 
				}
				
				m.returnType = cloneFx.returnType;
				
				m.methodBody.opcodes = cloneFx.methodBody.opcodes.concat()
				//m.methodBody.opcodes.splice(3, 0, new Op(Opcode.popscope) )	
				//slice scope variables TODO:make this more free form
					
				//m.methodBody.opcodes.splice( i, 1, new Op( Opcode.pop )  ) 
				//m.methodBody.opcodes.splice(2,2 )
				//m.methodBody.opcodes.splice(3,1 )
				//m.methodBody.opcodes.splice(4 , 0,new Op(Opcode.getlocal_1) )	
				//m.methodBody.opcodes.splice(4 , 0,new Op(Opcode.setlocal_0) )	
			
				/*m.methodBody.opcodes.splice(0, 0, new Op(Opcode.pushscope) )	
				m.methodBody.opcodes.splice(0, 0, new Op(Opcode.getlocal_0) )	*/
				//m.methodBody.opcodes.splice(0, 0, new Op(Opcode.getlocal_1) )	
				//m.methodBody.opcodes =null; 
				for ( var i : int = 0 ; i < m.methodBody.opcodes.length; i++ ) 
				{
					var op : Op = m.methodBody.opcodes[i];
					if ( op.opcode ==  Opcode.setlocal_1  )
					{
						//m.methodBody.opcodes.splice( i, 1   ) 
						//m.methodBody.opcodes.splice( i, 1, new Op( Opcode.setlocal_0 )  ) 
						//m.methodBody.opcodes.splice( i, 1, new Op( Opcode.getlocal_0 )  ) 	
						//m.methodBody.opcodes.splice( i, 1, new Op( Opcode.pop )  ) 
					}
					if ( op.opcode ==  Opcode.getlocal_1  )
					{
						//m.methodBody.opcodes.splice( i, 1   ) 
						//m.methodBody.opcodes.splice( i, 1, new Op( Opcode.getlocal_0 )  ) 
						//m.methodBody.opcodes.splice( i, 1, new Op( Opcode.getlocal_0 )  ) 	
						//m.methodBody.opcodes.splice( i, 1, new Op( Opcode.pop )  ) 
					}					
						
				}
				//m.methodBody.opcodes.push( new Op(Opcode.returnvoid) )
				//cloneFx.methodBody.opcodes.splice(2,2 )
				m.as3commonsByteCodeAssignedMethodTrait == null
				//rename old method 
				cloneFx.methodName = this.convertFxNameToRenamed(cloneFx.methodName); 
				cloneFx.methodBody.traits[0]
				//they use method body to go through here
				m.methodBody.methodSignature = m; 
				abcFile.addMethodBody( m.methodBody ); 
				abcFile.addMethodInfo( m ); //must add info (which is where count comes from)
				//add to constructor
				var constructor : MethodInfo = this.getConstructor( )
				/*
				var m2 : MethodBuilder = new MethodBuilder()
				var bb : QualifiedName = new QualifiedName(fxVarName, LNamespace.PUBLIC,MultinameKind.QNAME ) ; 
				m2.addOpcode( Opcode.getlocal_0 )
				.addOpcode( Opcode.newfunction,[abcFile.methodBodies.length-1] ) //-1 does nto work ? 2 ,3 is good
				.addOpcode( Opcode.pop ) 
				.addOpcode( Opcode.setproperty, [bb] ) 
				
				constructor.methodBody.opcodes.splice( constructor.methodBody.opcodes.length -2, 
				0, m2.opcodes[0], m2.opcodes[1] ,m2.opcodes[3] ) 
				*/
				
				var m2 : MethodBuilder = new MethodBuilder()
				var bb : QualifiedName = new QualifiedName(fxVarName, LNamespace.PUBLIC,MultinameKind.QNAME ) ; 
				var ooo : Object = this.abcFile.constantPool.namespacePool 
				var ns : LNamespace = this.abcFile.constantPool.namespacePool[2]; 
				ns = new LNamespace(NamespaceKind.PACKAGE_NAMESPACE, ""); 
				//	var qnPrototype : QualifiedName = new QualifiedName('prototypeXd', x,MultinameKind.QNAME ) ; 
				//var x : Multiname = new Multiname( 'prototype', m, MultinameKind.MULTINAME )
				//var ii : int = this.abcFile.constantPool.getMultinamePosition(x)
				var qnPrototype : QualifiedName = new QualifiedName('prototype', LNamespace.PUBLIC,MultinameKind.QNAME ) ; 
				var ii : int = this.abcFile.constantPool.getMultinamePositionByName( 'prototype' ) 
				qnPrototype = this.abcFile.constantPool.multinamePool[ii]
				//	if ( qnPrototype == null ) 
				qnPrototype = new QualifiedName('prototype', LNamespace.PUBLIC,MultinameKind.QNAME ) ; 
				m2.addOpcode( Opcode.getlocal_0 )
					.addOpcode( Opcode.findpropstrict, [qnPrototype] )
					.addOpcode( Opcode.getproperty, [qnPrototype] )
					.addOpcode( Opcode.newfunction,[abcFile.methodBodies.length-1] ) //-1 does nto work ? 2 ,3 is good
					.addOpcode( Opcode.pop ) 
					.addOpcode( Opcode.setproperty, [bb] ) 
				
				constructor.methodBody.opcodes.splice( constructor.methodBody.opcodes.length -2, 
					0, m2.opcodes[1], m2.opcodes[2], m2.opcodes[3] ,
					/*m2.opcodes[1], m2.opcodes[2],*/ m2.opcodes[5] )				
				
				
			}
			
		}
		
		private function initBlocking():void
		{
			return;
			var constructor : MethodInfo = this.getConstructor( )
			var m2 : MethodBuilder = new MethodBuilder()
			var ooo : Object = this.abcFile.constantPool.namespacePool 
			var ns : LNamespace = this.abcFile.constantPool.namespacePool[2]; 
			ns = new LNamespace(NamespaceKind.PACKAGE_NAMESPACE, ""); 
			//	var qnPrototype : QualifiedName = new QualifiedName('prototypeXd', x,MultinameKind.QNAME ) ; 
			//var x : Multiname = new Multiname( 'prototype', m, MultinameKind.MULTINAME )
			//var ii : int = this.abcFile.constantPool.getMultinamePosition(x)
			var qnPrototype : QualifiedName = new QualifiedName('prototype', LNamespace.PUBLIC,MultinameKind.QNAME ) ; 
			var initedProp : QualifiedName = new QualifiedName('inited', LNamespace.PUBLIC,MultinameKind.QNAME ) ; 
			var ii : int = this.abcFile.constantPool.getMultinamePositionByName( 'prototype' ) 
			qnPrototype = this.abcFile.constantPool.multinamePool[ii]
			//	if ( qnPrototype == null ) 
			qnPrototype = new QualifiedName('prototype', LNamespace.PUBLIC,MultinameKind.QNAME ) ; 
			m2.addOpcode( Opcode.findpropstrict, [qnPrototype] )
				.addOpcode( Opcode.getproperty, [qnPrototype] )
				.addOpcode( Opcode.getproperty, [initedProp] )			
				.addOpcode( Opcode.pushtrue  )		
				.addOpcode( Opcode.ifne, [1] )	
				.addOpcode( Opcode.returnvoid  )		
				.addOpcode( Opcode.findpropstrict, [qnPrototype] )
				.addOpcode( Opcode.getproperty, [qnPrototype] )
				.addOpcode( Opcode.pushtrue  )		
				.addOpcode( Opcode.setproperty, [initedProp] ) 
			var count : int =  0 ; 
			for each ( var op : Op in m2.opcodes )
			{
				/*constructor.methodBody.opcodes.splice( 
				constructor.methodBody.opcodes.length -2, 0, op )
				*/	
				constructor.methodBody.opcodes.splice( count , 0, op )
				count++
			}
			/*
			constructor.methodBody.opcodes.splice( constructor.methodBody.opcodes.length -2, 
			0, m2.opcodes[1], m2.opcodes[2], m2.opcodes[3] ,m2.opcodes[5] )	
			*/
		}
		
		private function getMethodByName(fxName:String):MethodInfo
		{
			for each ( var o : MethodInfo in this.abcFile.methodInfo ) 
			{
				if ( o.methodName == fxName ) 
					return o; 
			}
			return null;
		}		
		
		private function getAllFunctions():Array
		{
			var output : Array = [] ; 
			for each ( var o : MethodInfo in this.abcFile.methodInfo ) 
			{
				if ( o.as3commonsBytecodeName == 'constructor' ) 
					continue; 
				if ( o.methodName == '' ) 
					continue; 				 
				output.push( o.methodName ); 
			}
			return output;
		}
		
		private function getConstructor( ):MethodInfo
		{
			for each ( var o : MethodInfo in this.abcFile.methodInfo ) 
			{
				if ( o.as3commonsBytecodeName == 'constructor' ) 
					return o; 
			}
			return null;
		}		
		
		public function errorHandler(event:Event):void 
		{
			trace('errorHandler')
		}
		
		public function loadedHandler(event:Event):void 
		{
			//var className : String = 'blah.Foo2'
			//var clazz:Class = ApplicationDomain.currentDomain.getDefinition(className) as Class;
			if ( this.appDomain != null ) 
				var clazz:Class = this.appDomain.getDefinition(className) as Class;
			else
				clazz = ApplicationDomain.currentDomain.getDefinition(className) as Class;
			
			if ( this.version == 1 ) 
			{
				this.copyFunctions( clazz ); 
			}
			else
			{
				//should send in the old prototype ... 
				var existingClazz:Class = ApplicationDomain.currentDomain.getDefinition(this.originalClassName) as Class;
				var curentD : ApplicationDomain = ApplicationDomain.currentDomain; 
				this.copyFunctions2( existingClazz, clazz ); 
			}
			
			this.fxCallback(); 
			return;//if ur loading more than 2 file do not attempt to do this twice
			if ( this.className != 'blah.Foo' ) 
				return; 
			
			var instance:Object = new clazz();
			var o : Object = new Object(); 
			Object.prototype.jjk = instance.ggg; 
			Object.prototype.jjk2 = instance.fx; 
			
			
			var outputXML : Object = ImportClassUtils.getClassInfo( clazz ) 
			//var funcs : Array = this.dictFuncs[this.className]
			
			trace(Object.prototype.jjk); 
			
			var fooTest : Object = instance //as Foo; 
			fooTest.getBar() ;
			fooTest.getBar2();
			//test
			/*import blah.Foo
			var fooTest : Foo = instance as Foo; 
			fooTest.getBar() ;
			fooTest.getBar2(); */
			//end test
			instance.fx()
			o.jjk2()
			instance.ggg()
			o.jjk()
			//var i:int = instance.multiplyByHundred(10);
			//this.invokeCallBack(); 
			// i == 1000
		}
		
		private function copyFunctions2(existingClazz:Class, clazz:Class):void
		{
			var instance:Object = new clazz(); //make default paramets nullable ... to avoid problems 
			if ( this.isTestClass  ) 
				trace( 'test' ,instance.getPrivateBar() )
			for each ( var func : String in this.funcs ) 
			{
				//do i have to make fxs here? i don't think so ... 
				/*var fxName : String = this.convertFxNameToProp(func)
				existingClazz.prototype[func] = instance[fxName]
				*/
				existingClazz.prototype[func]		= null
					delete existingClazz.prototype[func]		
				var fxName : String = this.convertFxNameToProp(func);
				existingClazz.prototype[func] = clazz.prototype[fxName];
				var privateName : String = this.convertFxNameToRenamed(func);
				existingClazz.prototype[privateName] = clazz.prototype[fxName];				
				//clazz.prototype[func] = instance[fxName]
				existingClazz.prototype[func+1] = clazz.prototype[fxName];
				existingClazz.prototype[func] =  function (...args):Object
				{
					trace('test');
					return null;
					//return this[func+'1'].apply(this, args)
				}
			}
			
			if ( this.isTestClass  )
			{
				privateName = convertFxNameToProp('getPrivateBar')
				var fx : Function =  clazz.prototype[privateName];
				existingClazz.prototype['boo1'] = clazz.prototype[privateName];
				existingClazz.prototype['boo1'] = function () : String
				{
					trace(this)
					trace('boo 1');
					return 'boo1 ok'
				}
				trace( 'test' ,instance.getPrivateBar() )
				var instance2:Object = new existingClazz()
				trace( 'test' ,instance2.getPrivateBar() )
				existingClazz.prototype[func] = clazz.prototype[fxName]; 
				trace( 'test again' ,instance2.getPrivateBar() )
				trace( 'test boo1' ,instance2['boo1']() )
				//fx();
				return;
			} 
		}
		
		private function copyFunctions(clazz : Object):void
		{
			var instance:Object = new clazz(); //make default paramets nullable ... to avoid problems 
			if ( this.className == 'blah.Foo' ) 
			{
				try
				{
					instance.fxStore__getPrivateBar();
				} 
				catch(error:Error) 
				{
					trace('no') 
				}
				try
				{
					instance.getPrivateBar()
				} 
				catch(error:Error) 
				{
					trace('no') 
				}
				
			}
			for each ( var func : String in this.funcs ) 
			{
				//do i have to make fxs here? i don't think so ... 
				var fxName : String = this.convertFxNameToProp(func);
				clazz.prototype[func] = clazz.prototype[fxName];
				//clazz.prototype[func] = instance[fxName]
				delete clazz.prototype[fxName]
			}
			if ( this.className == 'blah.Foo' ) 
			{
				try
				{
					instance.fxStore__getPrivateBar();
				} 
				catch(error:Error) 
				{
					trace('no') 
				}
				try
				{
					instance.getPrivateBar()
				} 
				catch(error:Error) 
				{
					trace('no') 
				}
				
			}
			return;
		}
		public var propStoreFx_Preamble : String = 'fxStore__'
		public var propRenameFx_Preamble : String = 'fxInject__' 
		private var version:int;
		private var appDomain:ApplicationDomain;
		private var fxCallback:Function;
		public function convertFxNameToProp(s : String ) : String
		{
			return propStoreFx_Preamble+s
		}
		
		private function convertFxNameToRenamed(methodName:String):String
		{
			return propRenameFx_Preamble+methodName;
		}
		private function get  isTestClass( ):Boolean
		{
			if ( this.className == 'blah.Foo' || this.originalClassName == 'blah.Foo' ) 
				return true
			return false; 
		}
		
		
		
	}
}